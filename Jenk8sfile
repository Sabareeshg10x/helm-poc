#!/usr/bin/env groovy

import com.ipsy.buddy.DeploymentConfig
import com.ipsy.buddy.DeploymentInput
import groovy.transform.Field

node("slave && corretto17") {

    def NODE_VERSION = "16.16.0

    List<String> ENV = [
            "JAVA_HOME=${tool('java-17-amazon-corretto')}/amazon-corretto-17.0.11.9.1-linux-x64",
            "PATH+NODE=${tool('nodejs-' + NODE_VERSION)}/bin"
    

    utils.sendExceptionToSlack {
        dir('code') {
            stage("Setup") {
                echo "Prep for per-dir Jenkinsfile!"
                deleteDir()
                checkout(scm)
                sh 'git clean -f -d'
            }
        }

        dir('code/api-service') {
            withEnv(ENV) {
                stage("Checkstyle") {
                    if (!gradle.call("clean check")) {
                      error "Tests failed!"
                    }
                    echo "Tests passed!"
                }

                // Running sonarqube analysis
                stage('Sonarqube') {
                    sonarqube.withSonarEnv(NODE_VERSION, env.JAVA_HOME) {
                        gradle.call('sonarqube')
                    }
                }

                // Running sonarqube quality gate. This will pass/fail the pipeline based on quality conditions
                if (jenkinsUtils.isPR()) {
                    stage("Quality Gate") {
                        sonarqube.withSonarEnv(NODE_VERSION, env.JAVA_HOME) {
                            sonarqube.runQualityGate();
                        }
                    }
                }
            }
        }

        // Only deploy in manually triggered build branch or a deploy branch.
        if (!isManualBuildAndBuildBranch() && !isDeployBranch()) {
          echo "Not build branch and user build. Aborting..."
          return
        }

        def loadPath = env.CURRENT_DIR ? "code/${env.CURRENT_DIR}" : "code"

        stage("Determine which deploy to run") {
            if (BRANCH_NAME == "master") {
                load "${loadPath}/Jenkinsfile_build"
                utils.loadJenkinsFiles("${loadPath}/Jenkinsfile_prod_bfa")
            } else if (BRANCH_NAME == "develop") {
                load "${loadPath}/Jenkinsfile_build"
                utils.loadJenkinsFiles("${loadPath}/Jenkinsfile_staging_bfa")
            } else if (BRANCH_NAME.contains("build/")) {
                load "${loadPath}/Jenkinsfile_build"
            } else if (BRANCH_NAME.contains("testing/")) {
                load "${loadPath}/Jenkinsfile_build"
                utils.loadJenkinsFiles("${loadPath}/Jenkinsfile_staging_bfa")
            } else if (BRANCH_NAME.contains("preprod/")) {
                load "${loadPath}/Jenkinsfile_build"
                utils.loadJenkinsFiles("${loadPath}/Jenkinsfile_pre-prod-1_ipsy")
            }else if (BRANCH_NAME.contains("release/")) {
                load "${loadPath}/Jenkinsfile_build"
                utils.loadJenkinsFiles("${loadPath}/Jenkinsfile_prod_bfa")
            } else {
                echo "Skipping deploy for branch $BRANCH_NAME"
            }
        }
    }
}

// Returns true if this is a build branch and triggered by user-build
def isManualBuildAndBuildBranch() {
  return jenkinsUtils.isUserBuild() && (BRANCH_NAME.startsWith("build/") || BRANCH_NAME.startsWith("testing/") || BRANCH_NAME.startsWith("preprod/") || BRANCH_NAME.startsWith("release/"))
}

// Returns true if this branch is supposed to deploy and upload artifacts
def isDeployBranch() {
  return BRANCH_NAME == "master" || BRANCH_NAME == "develop"
}
